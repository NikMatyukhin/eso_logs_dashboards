"""create base tables

Revision ID: 506f099f978b
Revises:
Create Date: 2024-06-30 10:46:29.981369

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "506f099f978b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ability",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("base_name", sa.String(), nullable=False),
        sa.Column("icon", sa.String(), nullable=False),
        sa.Column("_type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ability")),
    )
    op.create_table(
        "difficulty",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_difficulty")),
    )
    op.create_table(
        "item_set",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_item_set")),
    )
    op.create_table(
        "partition",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("compact_name", sa.String(), nullable=False),
        sa.Column("default", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_partition")),
    )
    op.create_table(
        "region",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("slug", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_region")),
    )
    op.create_table(
        "spec",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("name", name=op.f("pk_spec")),
    )
    op.create_table(
        "zone",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_zone")),
    )
    op.create_table(
        "encounter",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("is_final", sa.Boolean(), nullable=False),
        sa.Column("zone_id", sa.Integer(), nullable=False),
        sa.Column("vhm_difficulty_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vhm_difficulty_id"],
            ["difficulty.id"],
            name=op.f("fk_encounter_vhm_difficulty_id_difficulty"),
        ),
        sa.ForeignKeyConstraint(
            ["zone_id"], ["zone.id"], name=op.f("fk_encounter_zone_id_zone")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_encounter")),
    )
    op.create_table(
        "item",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("icon", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("item_set_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_set_id"], ["item_set.id"], name=op.f("fk_item_item_set_id_item_set")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_item")),
    )
    op.create_table(
        "report",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=False),
        sa.Column("trial_score", sa.Integer(), nullable=True),
        sa.Column("trial_time", sa.DateTime(), nullable=True),
        sa.Column("region_id", sa.Integer(), nullable=False),
        sa.Column("zone_id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "start_time <= end_time", name=op.f("ck_report_start_less_than_end")
        ),
        sa.ForeignKeyConstraint(
            ["region_id"], ["region.id"], name=op.f("fk_report_region_id_region")
        ),
        sa.ForeignKeyConstraint(
            ["zone_id"], ["zone.id"], name=op.f("fk_report_zone_id_zone")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_report")),
    )
    op.create_table(
        "actor",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("damage_done", sa.Integer(), nullable=False),
        sa.Column("healing_done", sa.Integer(), nullable=False),
        sa.Column("_type", sa.String(), nullable=False),
        sa.Column("sub_type", sa.String(), nullable=False),
        sa.Column("report_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["report_id"], ["report.id"], name=op.f("fk_actor_report_id_report")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_actor")),
    )
    op.create_table(
        "fight",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=False),
        sa.Column("average_item_level", sa.Float(), nullable=False),
        sa.Column("boss_percentage", sa.Float(), nullable=True),
        sa.Column("report_id", sa.Integer(), nullable=False),
        sa.Column("encounter_id", sa.Integer(), nullable=True),
        sa.Column("difficulty_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["difficulty_id"],
            ["difficulty.id"],
            name=op.f("fk_fight_difficulty_id_difficulty"),
        ),
        sa.ForeignKeyConstraint(
            ["encounter_id"],
            ["encounter.id"],
            name=op.f("fk_fight_encounter_id_encounter"),
        ),
        sa.ForeignKeyConstraint(
            ["report_id"], ["report.id"], name=op.f("fk_fight_report_id_report")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_fight")),
    )
    op.create_table(
        "actor_ability",
        sa.Column("actor_id", sa.String(), nullable=False),
        sa.Column("ability_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ability_id"],
            ["ability.id"],
            name=op.f("fk_actor_ability_ability_id_ability"),
        ),
        sa.ForeignKeyConstraint(
            ["actor_id"], ["actor.id"], name=op.f("fk_actor_ability_actor_id_actor")
        ),
        sa.PrimaryKeyConstraint(
            "actor_id", "ability_id", name=op.f("pk_actor_ability")
        ),
    )
    op.create_table(
        "actor_item",
        sa.Column("trait", sa.Integer(), nullable=False),
        sa.Column("enchant", sa.Integer(), nullable=False),
        sa.Column("slot", sa.Integer(), nullable=False),
        sa.Column("actor_id", sa.String(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["actor_id"], ["actor.id"], name=op.f("fk_actor_item_actor_id_actor")
        ),
        sa.ForeignKeyConstraint(
            ["item_id"], ["item.id"], name=op.f("fk_actor_item_item_id_item")
        ),
        sa.PrimaryKeyConstraint(
            "actor_id", "item_id", "slot", name=op.f("pk_actor_item")
        ),
    )
    op.create_table(
        "actor_spec",
        sa.Column("actor_id", sa.String(), nullable=False),
        sa.Column("spec_name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["actor_id"], ["actor.id"], name=op.f("fk_actor_spec_actor_id_actor")
        ),
        sa.ForeignKeyConstraint(
            ["spec_name"], ["spec.name"], name=op.f("fk_actor_spec_spec_name_spec")
        ),
        sa.PrimaryKeyConstraint("actor_id", "spec_name", name=op.f("pk_actor_spec")),
    )
    op.create_table(
        "death_event",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("death_time", sa.DateTime(), nullable=False),
        sa.Column("actor_id", sa.String(), nullable=False),
        sa.Column("ability_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ability_id"],
            ["ability.id"],
            name=op.f("fk_death_event_ability_id_ability"),
        ),
        sa.ForeignKeyConstraint(
            ["actor_id"], ["actor.id"], name=op.f("fk_death_event_actor_id_actor")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_death_event")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("death_event")
    op.drop_table("actor_spec")
    op.drop_table("actor_item")
    op.drop_table("actor_ability")
    op.drop_table("fight")
    op.drop_table("actor")
    op.drop_table("report")
    op.drop_table("item")
    op.drop_table("encounter")
    op.drop_table("zone")
    op.drop_table("spec")
    op.drop_table("region")
    op.drop_table("partition")
    op.drop_table("item_set")
    op.drop_table("difficulty")
    op.drop_table("ability")
    # ### end Alembic commands ###
